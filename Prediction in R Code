

# --------------------------------------------
# Based on metrics to identify the picture and predict the position in new face
# --------------------------------------------

# please set the dir by your situation
# cannot write code for all the situation

# get the dir
getwd()
# set the dir
mydir = getwd()
setwd(mydir)

#Read in data
df.train<-read.csv("training.csv", stringsAsFactors=FALSE, header=TRUE)
test_df = read.csv('test_1000.csv')
colnames(df.train)
summary(df.train)

#Data cleaning
df.clean=subset(df.train,select = c(1,2,3,4,21,22,29,30,31))

df.clean_Con = subset(df.clean,df.clean$left_eye_center_x-11>0&96-df.clean$left_eye_center_x>11
                      ,select = c(1,2,3,4,5,6,7,8,9))
df.clean_Con = subset(df.clean_Con,df.clean_Con$left_eye_center_y-11>0&96-df.clean_Con$left_eye_center_y>11
                      ,select = c(1,2,3,4,5,6,7,8,9))
df.clean_Con = subset(df.clean_Con,df.clean_Con$right_eye_center_x-11>0&96-df.clean_Con$right_eye_center_x>11
                      ,select = c(1,2,3,4,5,6,7,8,9))
df.clean_Con = subset(df.clean_Con,df.clean_Con$right_eye_center_y-11>0&96-df.clean_Con$right_eye_center_y>11
                      ,select = c(1,2,3,4,5,6,7,8,9))
df.clean_Con = subset(df.clean_Con,df.clean_Con$nose_tip_x-11>0&96-df.clean_Con$nose_tip_x>11
                      ,select = c(1,2,3,4,5,6,7,8,9))
df.clean_Con = subset(df.clean_Con,df.clean_Con$nose_tip_y-11>0&96-df.clean_Con$nose_tip_y>11
                      ,select = c(1,2,3,4,5,6,7,8,9))
df.clean_Con = subset(df.clean_Con,df.clean_Con$mouth_center_bottom_lip_x-11>0&96-df.clean_Con$mouth_center_bottom_lip_x>11
                      ,select = c(1,2,3,4,5,6,7,8,9))
df.clean_Con = subset(df.clean_Con,df.clean_Con$mouth_center_bottom_lip_y-11>0&96-df.clean_Con$mouth_center_bottom_lip_y>11
                      ,select = c(1,2,3,4,5,6,7,8,9))

summary(df.train$mouth_center_bottom_lip_x)


#output cleaned data
write.csv(x = df.clean_Con,file = 'clean_data.csv')



train.file <- paste0(mydir, '/clean_data.csv')

data <- read.csv(train.file, stringsAsFactors=F)

dim(data)
data = data[,2:10]
dim(data)

# random all the data
data_new = data[sample(nrow(data),size=dim(data)[1],replace=TRUE),]
# get a look at our dataset
head(data_new)

dim(data_new)

# train-validation-test split
# both validation, test are set to 500
# be careful with the len
train.len = dim(data_new)[1]-1000
validation.len = 500
test.len = 500
to.train = data_new[1:train.len,]
to.validation = data_new[(train.len+1):(train.len+validation.len),]
to.test = data_new[(train.len+validation.len+1):(train.len+validation.len+test.len),]

trainimage = to.train$Image
to.train$Image = NULL
lb.train = to.train
im.train = array(0,dim = c(length(trainimage),96,96))
for (i in (1:length(trainimage)))
{
    im.intlize = as.integer(unlist(strsplit(trainimage[i], " ")))
    im.add = matrix(data=rev(im.intlize),nrow=96,ncol=96)
    for (j in 1:96)
        for (k in 1:96)
            {
            im.train[i,j,k] = im.add[j,k]
        }
    
}

validationimage = to.validation$Image
to.validation$Image = NULL
lb.validation = to.validation
im.validation = array(0,dim = c(length(validationimage),96,96))
for (i in (1:length(validationimage)))
{
    im.intlize = as.integer(unlist(strsplit(validationimage[i], " ")))
    im.add = matrix(data=rev(im.intlize),nrow=96,ncol=96)
    for (j in 1:96)
        for (k in 1:96)
            {
            im.validation[i,j,k] = im.add[j,k]
        }
    
}

testimage = to.test$Image
to.test$Image = NULL
lb.test = to.test
im.test = array(0,dim = c(length(testimage),96,96))
for (i in (1:length(testimage)))
{
    im.intlize = as.integer(unlist(strsplit(testimage[i], " ")))
    im.add = matrix(data=rev(im.intlize),nrow=96,ncol=96)
    for (j in 1:96)
        for (k in 1:96)
            {
            im.test[i,j,k] = im.add[j,k]
        }
    
}


# no_image: number of image
no_image = 1
# get each sample from all three dataset
imtrain = matrix(im.train[no_image,,],nrow = 96, ncol = 96)
imvalidation = matrix(im.validation[no_image,,],nrow = 96, ncol = 96)
imtest = matrix(im.test[no_image,,],nrow = 96, ncol = 96)

# show the data

# change j to show the position of different features
j = 1
image(1:96,1:96,imtrain,col=gray((0:255)/255))
points(96-lb.train[no_image,2*j-1],         96-lb.train[no_image,2*j],         col="red")
# why 96- ?? because the raw data is store in this way
96-lb.train[no_image,1]
96-lb.train[no_image,2]

image(1:96,1:96,imvalidation,col=gray((0:255)/255))

image(1:96,1:96,imtest,col=gray((0:255)/255))



# save the data
save(im.train, lb.train, im.validation, lb.validation, im.test, lb.test, file = 'newdata.Rd')

load('newdata.Rd')

# --------------------------------------------
# this is for average feature
# if you have questions, you can mail us
# this part is written by sam
# sen.lyu@uconn.edu
# --------------------------------------------

matrixoffeature = array(0,dim=c(dim(lb.train)[1], dim(lb.train)[2]/2, 21, 21))

for (i in 1:(dim(lb.train)[1])){
    for (j in 1:(dim(lb.train)[2]/2))
        {
        for (k in 1:21){
            for (l in 1:21){
                postion_x = 96 - round(lb.train[i,2*j-1] - k + 11)
                postion_y = 96 - round(lb.train[i,2*j] - l + 11)
                matrixoffeature[i,j,k,l] = im.train[i,postion_x,postion_y]
                }
            }
        }
}
    

# this is one feature of one image
no_image = 1 # no of image
no_feature = 1 # no of feature
im = matrix(matrixoffeature[no_image,no_feature,,],nrow = 21, ncol = 21)
image(1:21,1:21,im,col=gray((0:255)/255))

# save the big matrixoffeature
save(matrixoffeature,file='matrix.Rd')

load('matrix.Rd')

# this is our average feature
# get the mean_f[j]
# mean_f[j,,] is 21*21 part of the mean of all the feature j
# if matrixoffeature[i,j,,] is not NA, we add to get the mean_f[j,,]

j_len = dim(lb.train)[2]/2
mean_f = array(0, dim=c(j_len,21,21))
for (j in (1:j_len))
    {
    for (ii in 1:21)
        for (jj in 1:21){
            mean_f[j,ii,jj] = 0
        }
    for (i in 1:(dim(lb.train)[1])){
        for (k in 1:21)
            for (l in 1:21){
                if (!is.na(matrixoffeature[i,j,k,l])){
                    mean_f[j,k,l] = mean_f[j,k,l]*(i-1)/i+matrixoffeature[i,j,k,l]/i
                }
                
            }
        
    }
}


featurenum = 3
im = matrix(mean_f[featurenum,,],nrow = 21, ncol = 21)
image(1:21,1:21,im,col=gray((0:255)/255))

# save the average features
save(mean_f,file='meanfeatures.Rd')

load('meanfeatures.Rd')

# --------------------------------------------
# this is for model training, using gradient descent
# if you have questions, you can mail us
# this part is written by sam
# sen.lyu@uconn.edu
# --------------------------------------------

# for quick reload
load('newdata.Rd')
load('matrix.Rd')
load('meanfeatures.Rd')

# this is the compare function
# use to compare two 21*21 parts, to see how similiar of each other
# compare one feature in a image with the mean feature
# normalize all features
# set NA as -999
# remember the less the score function is more similiar
comparefeatures = function(a,b){
    maxa = max(a)
    mina = min(a)
    maxb = max(b)
    minb = min(b)
    newa = (a - mina)/(maxa-mina)
    newb = (b - minb)/(maxb-minb)
    score = sum((newa-newb)^2)
    if (is.na(score)) {
        score = 999
    }
    return(score)
}
# this is for test the compare function
#a = c(1,NA,3)
#b = c(100,101,102)
#comparefeatures(a,b)

# get the scores as our inputs of the model
# we set featureno as 1 for the frist feature, should be 15
getscore = function(image){
    dimx = dim(image)[1]
    dimy = dim(image)[2]
    featureno = 4
    score = matrix(nrow=(dimx-21)^2,ncol=featureno)
    for (j in 1:featureno){
        maxscore = -9999999999
        maxx = 0
        maxy = 0
        for (l in (1:(dimx-21))){
            for (k in (1:(dimy-21))){
                compareimage = image[l:(l+20),k:(k+20)]
                A = as.vector(mean_f[j,,])
                B = as.vector(compareimage[,])
                #la = length(A)
                #lb = length(B)
                #score = cor(A,B)
                score[(l-1)*(dimx-21)+k,j] = -comparefeatures(A,B)
                if (!is.na(score[(l-1)*(dimx-21)+k,j])) {
                    if (score[(l-1)*(dimx-21)+k,j] > maxscore) {
                        maxscore = score[(l-1)*(dimx-21)+k,j]
                        maxx = l
                        maxy = k
                    }
                }
            }
        }
    }
    return(score)
}


# get the y as our targets of the model
getthey = function(y){
    v1 = NULL
    v2 = NULL
    y = as.vector(y)
    featureno = 4
    for (i in 1:featureno){
        v1 = c(v1,y[i*2-1])
        v2 = c(v2,y[i*2])
    }
    aa = matrix(0,nrow=2,ncol=featureno)
    y = rbind(v1,v2)
    for (i in 1:2)
        for (j in 1:featureno){
            aa[i,j] = as.numeric(y[i,j])
    }
    return(aa)
}
#getthey(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30))




# this should be a standaraztion function of scores
stan_score_f = function(m){
    m_new = m
    means = mean(m)
    sds = sd(m)
    for (i in 1:dim(m)[2]){
        means = mean(m[,i])
        sds = sd(m[,i])
        for (j in 1:dim(m)[1]){
            m_new[j,i] = (m[j,i] - means) / sds
        }
        
    }
    return(m_new)
}


# because the scale of the score function and our targets, the learning rate of our model is fucking low
# I store the cost in cost[i], should be decreasing. and this is global variable and actually we dont have to do that

trainmodel = function(inputs,target,alpha,W,i){
    yy = W %*% inputs
    y_pred = matrix(0,nrow=2,ncol=4)
    for (j in 1:4){
        y_pred[1:2,j] = yy[(j*2-1):(j*2),j]
    }
    error = 1/2*(target - y_pred)%*%t((target - y_pred))
    cost[i] <<- sum(error)
    error1 = y_pred - target
    new_error = matrix(0,nrow=8,ncol=4)
    for (j in 1:4){
        new_error[(j*2-1):(j*2),j] = error1[1:2,j]
    }
    sums = alpha*(new_error) %*% t(inputs)
    W = W - sums
    return(W)
}

# get_predict
runmodel = function(inputs){
    yy = W %*% inputs
    y_pred = matrix(0,nrow=2,ncol=4)
    for (j in 1:4){
        y_pred[1:2,j] = yy[(j*2-1):(j*2),j]
    }
    return(y_pred)
}


#alpha = 1e-05
#i = 211 # change the i your self for single point test
#inputs = stan_score_f(getscore(im.train[i,,]))
#target = getthey(lb.train[i,])
#yy = W %*% inputs
#y_pred = matrix(0,nrow=2,ncol=4)
#for (j in 1:4){
#   y_pred[1:2,j] = yy[(j*2-1):(j*2),j]
#}
#error = 1/2*(target - y_pred)%*%t((target - y_pred))
#error1 = y_pred - target
#new_error = matrix(0,nrow=8,ncol=4)
#for (j in 1:4){
#        new_error[(j*2-1):(j*2),j] = error1[1:2,j]
#}
#sums = alpha*(new_error) %*% t(inputs)
#W = W - sums
#W
#error
#y_pred

W = matrix(0.001,nrow = 8,ncol = 5625)# set to be small

# get the scores
# seperate the inputs into batchs
W = matrix(0.001,nrow = 8,ncol = 5625)# set to be small
inum = 5000 # total number to train
assign("cost", matrix(0,nrow=inum,ncol=1), envir = .GlobalEnv) # this is for global variable
alpha = 1e-06
# train one by one
for (i in (1:inum)){
    #inputx = getscore(im.train[i,,])
    inputx = stan_score_f(getscore(im.train[i,,]))
    target = getthey(lb.train[i,])
    W = trainmodel(inputx,getthey(lb.train[i,]),alpha,W,i)
    #if (i%%10==0) print(cost[i])
    
}
# get the final weights
W
# get the cost
cost
plot(cost)

# save the model
nameofmodel = paste(c("alpha-",alpha,"num-",i,".Rd"),collapse = '')
nameofmodel
save(W,cost,i,alpha,file=nameofmodel)

# --------------------------------------------
# this is for model choosing, change the alpha and i, can load different model
# in the zip we have several model you can try to use
# if you have questions, you can mail us
# this part is written by sam
# sen.lyu@uconn.edu
# --------------------------------------------

alpha = 1e-06
i = 5000
nameofmodel = paste(c("alpha-",alpha,"num-",i,".Rd"),collapse = '')
load(nameofmodel)

plot(cost)

predictions = function(image, featurenumber){
    dimx = dim(image)[1]
    dimy = dim(image)[2]
    maxscore = -9999999999
    maxx = 0
    maxy = 0
    
    for (i in (1:(dimx-21)))
        for (j in (1:(dimy-21))){
            compareimage = image[i:(i+20),j:(j+20)]
            A = as.vector(mean_f[featurenumber,,])
            B = as.vector(compareimage[,])
            #la = length(A)
            #lb = length(B)
            #score = cor(A,B)
            score = -comparefeatures(A,B)
            if (score > maxscore) {
                maxscore = score
                maxx = i
                maxy = j
            }
            
        }
    
    return(c(maxscore,maxx,maxy))
    #return(c(la,lb))
    
}

#  compare the model with benchmark in virtal
numofpci = 70
numoffeature = 2
im = matrix(im.test[numofpci,,],nrow = 96, ncol = 96)
image(1:96,1:96,im,col=gray((0:255)/255))
points(96-lb.test[numofpci,2*numoffeature-1],         96-lb.test[numofpci,2*numoffeature],         col="red")
p = predictions(im.test[numofpci,,],numoffeature)
a = c(p[2]+11,p[3]+11)
points(a[1],         a[2],         col="green")
p_new = runmodel(stan_score_f(getscore(im.test[numofpci,,])))
points(96-p_new[1,numoffeature],         96-p_new[2,numoffeature],         col="blue")
p_new
lb.test[numofpci,]



library(jpeg)
#Function to read in and resize a JPEG image, directory is the location 
#of image should be string, d_1 is the resize width, d_2 is the resize height
read_image<-function(directory,d_1,d_2){
  myjpg <- readJPEG(directory)
  x = dim(myjpg)[1]
  y = dim(myjpg)[2]
  weight_move = round(x/d_1)
  height_move = round(y/d_2)
  im <- matrix(data=rev(myjpg), nrow=x, ncol=y)
  #Resize
  newImage2 = matrix(nrow = d_1,ncol=d_2)
  for(i in 1:d_1){
    for(j in 1:d_2){
      newImage2[i,j]=im[i*(weight_move-1),j*(height_move-1)]
    }
  }
  return(newImage2)
}

#Replace the nose
replace_mask<-function(imageName,mask_dir,x_pos,y_pos){
  mask <- readJPEG(mask_dir)
  nmask <- matrix(data=rev(mask), nrow=dim(mask)[1], ncol=dim(mask)[2])
  for(i in 1:dim(mask)[1]){
    for(j in 1:dim(mask)[2]){
      x = nmask[i,j]
      if(x<0.9){
        imageName[i+x_pos,j+y_pos]=nmask[i,j]
      }
    }
  }
  return(imageName)
}


#myjpg=read_image("1.jpg",96,96)
#myjpg = t(myjpg)
numofpci = 20
numoffeature = 4
myjpg = matrix(im.test[numofpci,,],nrow = 96, ncol = 96)

#gray = image(1:96, 1:96,myjpg, col=gray((0:255)/255))

#  compare the model with benchmark
tno = 500
feature1 = 0
feature2 = 0
feature3 = 0
feature4 = 0
for (i in (1:tno)){ 
    p_model = runmodel(stan_score_f(getscore(im.validation[i,,])))
    feature1_add = (lb.validation[i,1]-p_model[1,1])^2+(lb.validation[i,2]-p_model[2,1])^2
    feature2_add = (lb.validation[i,3]-p_model[1,2])^2+(lb.validation[i,4]-p_model[2,2])^2
    feature3_add = (lb.validation[i,5]-p_model[1,3])^2+(lb.validation[i,6]-p_model[2,3])^2
    feature4_add = (lb.validation[i,7]-p_model[1,4])^2+(lb.validation[i,8]-p_model[2,4])^2
    feature1 = feature1 + feature1_add
    feature2 = feature2 + feature2_add
    feature3 = feature3 + feature3_add
    feature4 = feature4 + feature4_add
}
feature1
feature2
feature3
feature4 



#myjpg=read_image("1.jpg",96,96)
#myjpg = t(myjpg)
numofpci = 100
numoffeature = 4
myjpg = matrix(im.test[numofpci,,],nrow = 96, ncol = 96)

p_new = runmodel(stan_score_f(getscore(myjpg)))
newjpg = myjpg

newjpg = replace_mask(newjpg,'star.jpg',96-p_new[1,1],96-p_new[2,1])
#gray = image(1:96, 1:96,new_eye, col=gray((0:255)/255))
newjpg = replace_mask(newjpg,'star.jpg',96-p_new[1,2],96-p_new[2,2])
#gray = image(1:96, 1:96,new_eye, col=gray((0:255)/255))
#newjpg = replace_mask(newjpg,'nose.jpg',96-p_new[1,3],96-p_new[2,3])
#gray = image(1:96, 1:96,new_nose, col=gray((0:255)/255))
newjpg = replace_mask(newjpg,'beard.jpg',96-p_new[1,4],96-p_new[2,4])

gray = image(1:96, 1:96,newjpg, col=gray((0:255)/255))

#mask <- readJPEG('star.jpg')
#dim(mask)
#nmask <- matrix(data=rev(mask), nrow=dim(mask)[1], ncol=dim(mask)[2])



